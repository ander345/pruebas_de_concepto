package collector
import (
    "github.com/yusufpapurcu/wmi"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus-community/windows_exporter/log"
)
func init() {
    registerCollector("{{ .CollectorName | toLower }}", new{{ .CollectorName }}Collector) // TODO: Add any perflib dependencies here
}
// A {{ .CollectorName }}Collector is a Prometheus collector for WMI {{ .Class }} metrics
type {{ .CollectorName }}Collector struct {
{{- range $m := .Members }}
    {{ $m.Name }} *prometheus.Desc
{{- end }}
}

func new{{ .CollectorName }}Collector() (Collector, error) {
    const subsystem = "{{ .CollectorName | toLower }}"
    return &{{ .CollectorName }}Collector{
{{- range $m := .Members }}
        {{ $m.Name }}: prometheus.NewDesc(
            prometheus.BuildFQName(Namespace, subsystem, "{{ $m.Name | toSnakeCase }}"),
            "({{ $m.Name }})",
            nil,
            nil,
        ),
{{- end }}
    }, nil
}

// {{ .Class }} docs:
// - <add link to documentation here>
type {{ .Class }} struct {
    Name string
{{ range $m := .Members }}
    {{ $m.Name }} {{ $m.Type }}
{{- end }}
}

// Collect sends the metric values for each metric
// to the provided prometheus Metric channel.
func (c *{{ .CollectorName }}Collector) Collect(ctx *ScrapeContext, ch chan<- prometheus.Metric) error {
    var dst []{{ .Class }}
    q := queryAll(&dst)
    if err := wmi.Query(q, &dst); err != nil {
        return nil, err
    }
    {{ range $m := .Members }}
    ch <- prometheus.MustNewConstMetric(
        c.{{ $m.Name }},
        prometheus.GaugeValue,
        float64(dst[0].{{ $m.Name }}),
    )
    {{ end }}
    return nil, nil
}
